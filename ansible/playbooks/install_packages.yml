---
- name: Install packages on Ubuntu
  hosts: localhost # Or replace with remote hosts if managing multiple machines
  become: true # Enables sudo
  vars:
    ansible_user: clawrence
  vars_files:
    - ../configs/ubuntu-packages.yml # Loads your config
  tasks:
    - name: Install apt packages
      ansible.builtin.apt:
        name: "{{ installer.ubuntu.apt }}"
        state: present
        update_cache: true
      when: installer.ubuntu.apt is defined and installer.ubuntu.apt | length > 0

    - name: Install snap packages (strict confinement)
      community.general.snap:
        name: "{{ installer.ubuntu.snap }}"
        state: present
      when: installer.ubuntu.snap is defined and installer.ubuntu.snap | length > 0
      failed_when: false
    - name: Install snap packages (classic confinement)
      community.general.snap:
        name: "{{ installer.ubuntu.snap_classic }}"
        state: present
        classic: true
      when: installer.ubuntu.snap_classic is defined and installer.ubuntu.snap_classic | length > 0
      failed_when: false

    - name: Install starship via curl
      ansible.builtin.shell: |
        curl -fsSL https://starship.rs/install.sh | bash -s -- -y
      args:
        creates: /usr/local/bin/starship

    - name: Check if Warp Terminal is installed
      ansible.builtin.stat:
        path: /usr/bin/warp-terminal
      register: warp_installed
      failed_when: false # Ensure task doesn't fail on error
    - name: Download Warp Terminal .deb package
      ansible.builtin.get_url:
        url: https://app.warp.dev/download?package=deb
        dest: /tmp/warp-latest.deb
        mode: "0644"
        force: false # Only download if not already present
      when: warp_installed is defined and not warp_installed.stat.exists
    - name: Install Warp Terminal
      ansible.builtin.apt:
        deb: /tmp/warp-latest.deb
      when: warp_installed is defined and not warp_installed.stat.exists
    - name: Clean up Warp Terminal .deb
      ansible.builtin.file:
        path: /tmp/warp-latest.deb
        state: absent
      when: warp_installed is defined and not warp_installed.stat.exists

    - name: Install gnome-shell-extension-prefs
      ansible.builtin.apt:
        name: gnome-shell-extension-prefs
        state: present
      when: installer.ubuntu.gnome_extensions is defined and installer.ubuntu.gnome_extensions | length > 0

    - name: Create temporary directory for extension downloads
      ansible.builtin.tempfile:
        state: directory
        suffix: gnome_extensions
      register: temp_dir
      when: installer.ubuntu.gnome_extensions is defined and installer.ubuntu.gnome_extensions | length > 0

    - name: Download GNOME Shell extensions
      ansible.builtin.get_url:
        url: "https://extensions.gnome.org/extension-data/{{ item }}.v{{ lookup('url', 'https://extensions.gnome.org/extension-info/?pk={{ item }}', split_lines=false) | from_json | dig('shell_version_map', ansible_facts.ansible_distribution_version | replace('.', '_'), 'version') }}.shell-extension.zip"
        dest: "{{ temp_dir.path }}/{{ item }}.zip"
        mode: "0644"
      loop: "{{ installer.ubuntu.gnome_extensions }}"
      when: installer.ubuntu.gnome_extensions is defined and installer.ubuntu.gnome_extensions | length > 0
      register: download_result
      ignore_errors: true  # Handle download errors gracefully

    - name: Install GNOME Shell extensions
      ansible.builtin.command:
        cmd: "gnome-extensions install {{ temp_dir.path }}/{{ item }}.zip --force"
        creates: "~/.local/share/gnome-shell/extensions/{{ item }}"
      loop: "{{ installer.ubuntu.gnome_extensions }}"
      when: installer.ubuntu.gnome_extensions is defined and installer.ubuntu.gnome_extensions | length > 0
      register: install_result
      changed_when: install_result.rc == 0
      ignore_errors: true

    - name: Enable GNOME Shell extensions
      ansible.builtin.command:
        cmd: "gnome-extensions enable {{ item }}"
      loop: "{{ installer.ubuntu.gnome_extensions }}"
      when: installer.ubuntu.gnome_extensions is defined and installer.ubuntu.gnome_extensions | length > 0
      register: enable_result
      changed_when: enable_result.rc == 0

    - name: Clean up downloaded extension files
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent
      when: temp_dir.path is defined

    - name: Restart GNOME Shell
      ansible.builtin.command:
        cmd: 'busctl call org.gnome.Shell /org/gnome/Shell org.gnome.Shell Eval string ''Meta.restart("Restartingâ€¦")'''
      become: false
      when: install_result.changed or enable_result.changed
      changed_when: false
